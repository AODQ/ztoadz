#version 460
#extension GL_EXT_shader_image_int64 : require
#extension GL_EXT_shader_explicit_arithmetic_types : require

// individual triangle (microRastEmitTriangleCount), unused, unused
layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0, r64ui) uniform u64image2D visibilitySurfaceImage;

layout (set = 0, binding = 1) buffer IntermediaryAttributeAssembly {
  vec4 intermediaryAttributes[];
};

// TODO...
// layout (set = 0, binding = 2) buffer MeshIntermediaryAssembly {
//   uint originOffset; // FOR NOW we assume 0
//   uint originStride; // FOR NOW we assume sizeof(vec4) (default of 0 as well)
// };

layout (set = 0, binding = 2) buffer MicroRastEmitTriangleIDs {
  uint64_t microRastEmitTriangleIDs[];
};

layout (set = 0, binding = 3) buffer MicroRastEmitMetadata {
  uint64_t microRastEmitTriangleCount;
};

#define triangleIdToEmitId(x) microRastEmitTriangleIDs[x]
#include "simple-triangle-library-rasterizer.glsl"

void main() {
  const ivec2 viewportDim = imageSize(visibilitySurfaceImage);
  const ivec3 dispatchId = ivec3(gl_GlobalInvocationID.xyz);

  const uint32_t emitId = dispatchId.x;

  if (emitId >= microRastEmitTriangleCount) {
    return;
  }

  const uint32_t triangleId = uint32_t(microRastEmitTriangleIDs[emitId]);

  const TriangleInfo tri = GatherTriangleInfo(triangleId, viewportDim);

  const vec2 v0 = tri.screenV0.xy / tri.screenV0.z;
  const vec2 v1 = tri.screenV1.xy / tri.screenV1.z;
  const vec2 v2 = tri.screenV2.xy / tri.screenV2.z;

  const ivec2 minBounds = (
    ivec2(
      max(
        vec2(-viewportDim/2.0f-vec2(1.0f)),
        min(v0.xy, min(v1.xy, v2.xy))-vec2(0.5f)
      )
    )
  );

  const ivec2 maxBounds = (
    ivec2(
      min(
        vec2(+viewportDim/2.0f+vec2(1.0f)),
        max(v0.xy, max(v1.xy, v2.xy))+vec2(0.5f)
      )
    )
  );

  for (int itX = minBounds.x; itX < maxBounds.x; ++ itX)
  for (int itY = minBounds.y; itY < maxBounds.y; ++ itY) {
    vec2 uvcoord = vec2(itX, itY) + vec2(0.5f);
    float interDepth = computeTriangleDepthAtUv(tri, uvcoord);
    uint32_t triangleIdU32 = uint32_t(triangleId);
    if (interDepth > 0.0f && interDepth <= 1.0f) {
      uint32_t depthU32 = floatBitsToUint(interDepth);
      uint64_t triangleStore = triangleIdU32 | (uint64_t(depthU32) << 32);
      imageAtomicMax(
        visibilitySurfaceImage,
        viewportDim/2+ivec2(itX, itY),
        triangleStore
      );
    }
  }
}
