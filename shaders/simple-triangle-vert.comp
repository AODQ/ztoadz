#version 460
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) buffer TriangleVertexAssembly {
  vec4 inputVertexAttributes[];
};

layout (set = 0, binding = 1) buffer TriangleIntermediaryAssembly {
  vec4 outputOrigins[];
};

layout (set = 0, binding = 2) buffer TriangleVertexAssemblyMetadata {
  uint32_t numTriangles;
};

/* layout (set = 0, binding = 3) buffer Camera { */
/*   mat4 cameraMatrix */
/*   uint32_t numTriangles; */
/* }; */

mat4 LookAt(vec3 eye, vec3 at, vec3 up) {
  vec3 zaxis = normalize(at - eye);
  vec3 xaxis = normalize(cross(zaxis, up));
  vec3 yaxis = cross(xaxis, zaxis);

  zaxis = -zaxis;

  mat4 viewMatrix = {
    vec4(xaxis.x, xaxis.y, xaxis.z, -dot(xaxis, eye)),
    vec4(yaxis.x, yaxis.y, yaxis.z, -dot(yaxis, eye)),
    vec4(zaxis.x, zaxis.y, zaxis.z, -dot(zaxis, eye)),
    vec4(0, 0, 0, 1)
  };

  return viewMatrix;
}

mat4 defaultPerspective() {
  const float tanHalfFov = tan(0.75);
  const float ar = 1.0f;
  float near = 0.0f, far = 1000000.0f, range = (far-near);
  mat4 m = mat4(
    1.0f/(tanHalfFov * ar), 0.0f, 0.0f, 0.0f,
    0.0f, 1.0f/tanHalfFov, 0.0f, 0.0f,
    0.0f, 0.0f, (-near - far)/range, 2.0f*far*near/range,
    0.0f, 0.0f, 1.0f, 0.0f
  );

  m[1][0] = -m[1][0];
  m[1][1] = -m[1][1];
  m[1][2] = -m[1][2];
  m[1][3] = -m[1][3];
  m[2][0] = -m[2][0];
  m[2][1] = -m[2][1];
  m[2][2] = -m[2][2];
  m[2][3] = -m[2][3];

  return m;
}

vec4 mtEntry(const uint inputId) {
  vec4 origin = inputVertexAttributes[inputId];
  /* origin.xyz += vec3(1.0f); */
  // hardcode matrix
  mat4 view = (
    LookAt(vec3(-2.3f, 2.5f, 1.0f), vec3(0.0f, -1.0f, 0.2f), vec3(0.0f, 1.0f, 0.0))
  );
  mat4 proj = defaultPerspective();
  vec4 o = origin*(view*proj);
  o /= o.w;
  return o;
}

uvec4 toSrgb(const vec4 inp) {
  return uvec4(inp * vec4(255.0f));
}

void main() {
  const uint it = gl_GlobalInvocationID.x;
  if (it.x >= numTriangles) return;

  outputOrigins[it*3+0] = mtEntry(it*3+0);
  outputOrigins[it*3+1] = mtEntry(it*3+1);
  outputOrigins[it*3+2] = mtEntry(it*3+2);
}
