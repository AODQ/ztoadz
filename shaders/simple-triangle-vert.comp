#version 460
#extension GL_EXT_shader_explicit_arithmetic_types : enable

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

layout (set = 0, binding = 0) buffer TriangleVertexAssembly {
  vec4 inputVertexAttributes[];
};

layout (set = 0, binding = 1) buffer TriangleIntermediaryAssembly {
  vec4 outputOrigins[];
};

layout (set = 0, binding = 2) buffer TriangleVertexAssemblyMetadata {
  uint32_t numTriangles;
};

/* layout (set = 0, binding = 3) buffer Camera { */
/*   mat4 cameraMatrix */
/*   uint32_t numTriangles; */
/* }; */

mat4 LookAt(vec3 eye, vec3 center, vec3 up) {
  vec3 f = normalize(center - eye);
  vec3 s = normalize(cross(up, f));
  vec3 u = cross(f, s);

  mat4 result = mat4(1.0f);
  result[0][0] = s.x;
  result[1][0] = s.y;
  result[2][0] = s.z;
  result[0][1] = u.x;
  result[1][1] = u.y;
  result[2][1] = u.z;
  result[0][2] = f.x;
  result[1][2] = f.y;
  result[2][2] = f.z;
  result[3][0] = -dot(s, eye);
  result[3][1] = -dot(u, eye);
  result[3][2] = -dot(f, eye);
  return result;
}

mat4 defaultPerspective() {
  const float tanHalfFov = tan(radians(75.0f) / 2.0f);
  const float ar = 1.0f;

  /* float near = 0.0f, far = 100.0f; */
  /* mat4 m = mat4( */
  /*   tanHalfFov/ar, 0.0f, 0.0f, 0.0f, */
  /*   0.0f, tanHalfFov, 0.0f, 0.0f, */
  /*   0.0f, 0.0f, 0.0f, -1.0f, */
  /*   0.0f, 0.0f, 0.0f, 0.0f */
  /* ); */

  float zFar = 1000.0f;
  float zNear = 0.00f;
  mat4 result = mat4(0.0f);
  result[0][0] = 1.0f / (ar * tanHalfFov);
  result[1][1] = 1.0f / (tanHalfFov);
  result[2][2] = zFar / (zFar - zNear);
  result[2][3] = 1.0f;
  result[3][2] = -(zFar * zNear) / (zFar - zNear);
  return result;
}

vec4 mtEntry(const uint inputId) {
  const vec4 origin = inputVertexAttributes[inputId];
  // hardcode matrix
  const mat4 view = (
    LookAt(
      vec3(0.0f, 0.0f, 5.0f),
      vec3(0.0f, 0.0f, 0.0f),
      vec3(0.0f, -1.0f, 0.0)
    )
  );
  const mat4 proj = defaultPerspective();

  return (proj*view)*origin;
}

uvec4 toSrgb(const vec4 inp) {
  return uvec4(inp * vec4(255.0f));
}

void main() {
  const uint it = gl_GlobalInvocationID.x;
  if (it.x >= numTriangles) return;

  outputOrigins[it*3+0] = mtEntry(it*3+0);
  outputOrigins[it*3+1] = mtEntry(it*3+1);
  outputOrigins[it*3+2] = mtEntry(it*3+2);
}
